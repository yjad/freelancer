import os
import csv
import datetime

from openpyxl import Workbook, load_workbook
from DB import query_to_list, exec_db_cmd, insert_row_vulner, open_db, close_db, insert_row_list
from load_db import insert_stats
from tkinter import END, messagebox

FULL_HEADER = ["name","sequenceNumber","scanresultid","criticalDetails","severity","status","active","duration",
              "concern","startTime","vulnerabilities","numHosts","solution","ipaddress","assetName","vulnerabilityInstances","risk",
              "vulnid","openServices","description","scanProfileId","cancelled","runSchedule","vulnerability","cveid",
              "exposureId","score","domainName"]
IP_ADDRESS_COL = 13
ASSET_NAME_COL = 14


def load_header_idx(header):
    header_idx= [-1] * len(FULL_HEADER)

    for i, col in enumerate(header):
        if col.value:
            x = FULL_HEADER.index(col.value)
            if x != -1:
                header_idx[i] = x
    return header_idx
    
    
def load_increment_scan_result(file_path, output):
    
    if type(file_path) == str:  # is folder?
        scan_data = load_scan_dir_csv(file_path, output)
    else:
        scan_data = load_scan_files(file_path, output)
        
    ips=[r[IP_ADDRESS_COL] for r in scan_data]
    # ------- del_old_vulners ---------------
    ip_list = '"' + '","'.join(ips) + '"'
    cmd = f"DELETE FROM vulnerability WHERE ipaddress in ({ip_list})"
    status = exec_db_cmd(cmd)
    
    lst = check_new_assets(scan_data)  # if new assets in this scan, add to assets table
    # ---- Inset new scan records
    
    conn, cursor = open_db()
    for i,row in enumerate(scan_data):
 
        row [0] = lst[i]    # replace temp profile_name with the once from assets
        insert_row_vulner(conn, cursor, row)
    conn.commit()
    close_db(cursor)
    
    exec_db_cmd("DELETE FROM stats where date > '2020-09-22'")
    # check new profiles not in 22-9 and add them to 
    check_new_profiles_stats()  # append stats with newly added profiles
    Update_stats()              # update 'current_' fields with the new stats
    
def load_scan_files(file_paths, output):   # scan_data is in standard qradar format, 24 column
    output.delete(0.0, END)        # clear window
    scan_data = []
    for file_path in file_paths:
        output.insert(END, f'Loadind the files: {file_path}\n')
        xl_wb = load_workbook(file_path)
        for sheet in xl_wb:
            for l, row in enumerate(sheet.rows):
                if l == 0:  # skip header
                    header_idx = load_header_idx(row)
                else:
                    line = [''] * len(FULL_HEADER)
                    for i, cell in enumerate(row):
                        line[header_idx[i]] = cell.value
                    scan_data.append(line)
        # print ("load scan: ", len(scan_data))
    return scan_data
    

def load_scan_dir_csv(data_folder, output):   # scan_data is in standard qradar format, 24 column
    output.delete(0.0, END)        # clear window
    scan_data = []
    for folder, subs, files in os.walk(data_folder):
        for f in files:
            filename, file_extension = os.path.splitext(f)
            if file_extension != ".csv":
                continue
            output.insert(END, filename + '\n')
            with open(os.path.join(os.path.join(folder, f))) as csv_file:
                csv_reader = csv.reader(csv_file, delimiter=',')
                for i, row in enumerate(csv_reader):
                    if len(row) != 28:
                        output.insert(END, f'filename skipped, # col are not 28, it is: {len(row)}" \n')
                        break
                    if row[0] != 'name':        # skip header
                        # output.insert(END, filename +  str(i) + '\n')
                        scan_data.append(row)
    return scan_data
    
def check_new_assets(scan_data):

    new_servers = False
    profile_list = []
    conn, cursor = open_db()
    for row in scan_data:
        ip = row[IP_ADDRESS_COL]
        cmd = f"SELECT profile_name FROM assets WHERE ipaddress = '{ip}'"
        header, lst = query_to_list(cmd)
        if len(lst)== 0:    # IP not found, add it as is until manual fix, add "(NEW)"
            print(f"Newly added server: {ip}, tmp profile:{row[0]}")
            new_servers = True
            profile_name =  row[0] + " -(NEW)"
            profile_list.append(profile_name)
            rec = [ip, profile_name, row[ASSET_NAME_COL], "?", "?", ""]
            try:
                insert_row_list(conn, cursor, "assets", rec)
                conn.commit()
            except:
                print (f"check_new_assets: record already exist")
                continue    # record already exist frrom previous scan row
        else:   # found, relace temp scan profile name with asset profile_name
            profile_list.append(lst[0][0])
    
    close_db(cursor)
    if new_servers:
        messagebox.showinfo("Warning", "Newly added assets to assets name, please arrange to adjust")
    return profile_list
    

def check_new_profiles_stats():

    base_date = "2020-09-22"
    header, lst = query_to_list ("select date from stats order by 1 DESC limit 1")
    last_date = lst[0][0]
    cmd = f"""
    SELECT ms.milestone, assets.profile_group,vul.name,  stats.profile_name  
    FROM vulnerability vul 
            LEFT JOIN assets on assets.ipaddress = vul.ipaddress
            LEFT JOIN stats on vul.name = stats.profile_name
			LEFT JOIN milestone ms on name = ms.profile_name
    GROUP BY vul.name
    HAVING stats.profile_name is NULL"""
    header, profile_list = query_to_list(cmd)
    conn, cursor = open_db()
    for row in profile_list:
        rec = [base_date,row[0],row[1], row[2], 0,0,0,0,0,0,0,0,0,0,0,0]
        try:
            insert_row_list(conn, cursor, "stats", rec)
            conn.commit()
        except:
            print (f"error adding new profile to base stats:", profile_name)
            continue    # record already exist frrom previous scan row    
    close_db(cursor)


def Update_stats():
   # print ("update_status")
    cmd = f"""UPDATE stats
    SET current_numHosts = crnt.numHosts,
        current_total_all = crnt.total_all,
        current_total_HM = crnt.total_HM
    FROM
    (
    SELECT ms.milestone, assets.profile_group, vul.name,
        COUNT(DISTINCT vul.ipaddress) as numHosts,
        COUNT(risk) as total_all, 
        COUNT(CASE WHEN risk in ('High' ,'Medium') Then 1 END) as total_HM 
        FROM vulnerability vul 
            LEFT JOIN assets on assets.ipaddress = vul.ipaddress
            LEFT JOIN milestone ms on vul.name = ms.profile_name
        GROUP by assets.profile_group, ms.milestone, ms.profile_name
    ) crnt
    WHERE stats.Date = '2020-09-22' AND stats.milestone = crnt.milestone 
    AND stats.profile_group = crnt.profile_group AND stats.profile_name = crnt.name"""
    # print (cmd)
    exec_db_cmd(cmd)

    cmd = """UPDATE stats
    SET current_total_vt = crnt.total_vt
    FROM
    (
    SELECT ms.milestone, profile_group, vul.name,
        COUNT(DISTINCT vulnerability) as "total_vt"
        FROM vulnerability vul 
        LEFT JOIN assets on assets.ipaddress = vul.ipaddress
        LEFT JOIN milestone ms on vul.name = ms.profile_name
    WHERE risk in ('High', 'Medium')
    GROUP by profile_group, ms.milestone, ms.profile_name
    ) as crnt
    WHERE stats.Date = '2020-09-22' AND stats.milestone = crnt.milestone 
    AND stats.profile_group = crnt.profile_group AND stats.profile_name = crnt.name"""
    # print (cmd)
    exec_db_cmd(cmd)
