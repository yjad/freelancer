import os
import datetime

from openpyxl import Workbook, load_workbook
from DB import query_to_list, exec_db_cmd, insert_row_vulner, open_db, close_db, insert_row_list
FULL_HEADER = ["name","sequenceNumber","scanresultid","criticalDetails","severity","status","active","duration",
              "concern","startTime","vulnerabilities","numHosts","solution","ipaddress","assetName","vulnerabilityInstances","risk",
              "vulnid","openServices","description","scanProfileId","cancelled","runSchedule","vulnerability","cveid",
              "exposureId","score","domainName"]
IP_ADDRESS_COL = 13
ASSET_NAME_COL = 14


def load_header_idx(header):
    header_idx= [-1] * len(FULL_HEADER)

    for i, col in enumerate(header):
        if col.value:
            x = FULL_HEADER.index(col.value)
            if x != -1:
                header_idx[i] = x
    return header_idx
    
    
def load_increment_scan_result(file_path):
    
    scan_data = load_scan(file_path)
    ips=[r[IP_ADDRESS_COL] for r in scan_data]
    # ------- del_old_vulners ---------------
    ip_list = '"' + '","'.join(ips) + '"'
    cmd = f"DELETE FROM vulnerability WHERE ipaddress in ({ip_list})"
    status = exec_db_cmd(cmd)
    
    lst = check_new_assets(scan_data)  # if new assets in this scan, add to assets table

    # ---- Inset new scan records
    
    conn, cursor = open_db()
    for row in scan_data:
        insert_row_vulner(conn, cursor, row)
    conn.commit()
    close_db(cursor)
    
    # ----- Insert new scan results
    # *** delete same days stats, if any ***
    cmd = f"DELETE FROM stats where date = '{datetime.date.today()}'"
    exec_db_cmd(cmd)
    
    cmd = """INSERT INTO stats 
    SELECT date('now') as "Date", vlan_group as "Group", location, 
    COUNT(distinct assets.ipaddress) as "numHosts",
	COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	COUNT(risk) as "Total"
    FROM vulnerability vul LEFT JOIN assets on assets.ipaddress = vul.ipaddress
    GROUP by location, vlan_group
    ORDER BY 2"""
    exec_db_cmd(cmd)

    
def load_scan(file_path):   # scan_data is in standard qradar format, 17 column
    scan_data=[]
    xl_wb = load_workbook(file_path)
    for sheet in xl_wb:  
        for l, row in enumerate(sheet.rows):
            if l == 0:  # skip header
                header_idx = load_header_idx(row)
            else:
                line = [''] * len(FULL_HEADER)
                for i, cell in enumerate(row):
                    line[header_idx[i]] = cell.value
                scan_data.append(line)
    return scan_data
    
def check_new_assets(scan_data):
    # assets_lst = query_to_list(cmd)
    conn, cursor = open_db()
    for row in scan_data:
        ip = row[IP_ADDRESS_COL]
        cmd = f"SELECT ipaddress FROM assets WHERE ipaddress = '{ip}'"
        header, lst = query_to_list(cmd)
        # print ("--------------->:", lst)
        if len(lst)== 0:    # not found
            rec = [ip, row[0], row[ASSET_NAME_COL], "New", "New"]
            try:
                insert_row_list(conn, cursor, "assets", rec)
                conn.commit()
            except:
                continue    # record already exist frrom previous scan row
    
    close_db(cursor)
    
def old_get_scan_ip(file_path):
    file_name, file_extension = os.path.splitext(file_path)
    if file_extension == ".csv":
        print (".csv file, no processing yet")
        exit(-3)
    elif file_extension == ".xlsx":
        xl_wb = load_workbook(file_path)
        for sheet in xl_wb:   
            if sheet[1][0].value != 'name':
                print (sheet[1][0].value)
                print ("file has no header00")
                exit(-2)
            ips=[]
            for i, row in enumerate(sheet): # get col # of ipaddress & cveid columns
                if i == 0:
                    for j, cell in enumerate(row):
                        if cell.value == "ipaddress":
                            ip_col = j 
                else:
                    ips.append(row[ip_col].value)
    return ips
        


# file_name = r"C:\Users\yahia\Downloads\ATM-Routers-Remaining-Remediation.xlsx"
# ips = load_increment_scan_result(file_name)
