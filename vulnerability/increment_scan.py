import os
import csv
import datetime

from openpyxl import Workbook, load_workbook
from DB import query_to_list, exec_db_cmd, insert_row_vulner, open_db, close_db, insert_row_list
from tkinter import END, messagebox

FULL_HEADER = ["name","sequenceNumber","scanresultid","criticalDetails","severity","status","active","duration",
              "concern","startTime","vulnerabilities","numHosts","solution","ipaddress","assetName","vulnerabilityInstances","risk",
              "vulnid","openServices","description","scanProfileId","cancelled","runSchedule","vulnerability","cveid",
              "exposureId","score","domainName"]
IP_ADDRESS_COL = 13
ASSET_NAME_COL = 14


def load_header_idx(header):
    header_idx= [-1] * len(FULL_HEADER)

    for i, col in enumerate(header):
        if col.value:
            x = FULL_HEADER.index(col.value)
            if x != -1:
                header_idx[i] = x
    return header_idx
    
    
def load_increment_scan_result(file_path, output):
    
    output.insert(END, 'Loadind the files:' +  file_path + ' .....\n')
    if type(file_path) == str:  # is folder?
        scan_data = load_scan_dir_csv(file_path, output)
    else:
        scan_data = load_scan_files(file_path, output)

    scan_data = replace_temp_profile_name(scan_data)

    ips=[r[IP_ADDRESS_COL] for r in scan_data]
    output.insert(END," ------- del_old_vulners ---------------\n")

    ip_list = '"' + '","'.join(ips) + '"'
    cmd = f"DELETE FROM vulnerability WHERE ipaddress in ({ip_list})"
    exec_db_cmd(cmd)

    output.insert(END," ---- Inset new scan records \n")
    conn, cursor = open_db()
    for row in scan_data:
        insert_row_vulner(conn, cursor, row)
    conn.commit()
    close_db(cursor)
    
    # lst = check_new_assets(scan_data)  # if new assets in this scan, add to assets table

    output.insert(END," Add new stats\n")
    if add_new_assets():    # there are new assets. stop here and continue after fixing new assets's data
        messagebox.showinfo("Warning", "Newly added assets to assets with profile_group '?', please arrange to adjust and then run menu 'Update Stats'" )
        return
   
    # add_new_profile_stats()  # append stats with newly added profiles
    output.insert(END," Update Stats \n")
    update_stats()              # update 'current_' fields with the new stats
    

def load_scan_files(file_paths, output):   # scan_data is in standard qradar format, 24 column
    output.delete(0.0, END)        # clear window
    scan_data = []
    for file_path in file_paths:

        output.insert(END, f'Loadind the files: {file_path}\n')
        xl_wb = load_workbook(file_path)
        for sheet in xl_wb:
            for l, row in enumerate(sheet.rows):
                if l == 0:  # skip header
                    header_idx = load_header_idx(row)
                else:
                    line = [''] * len(FULL_HEADER)
                    for i, cell in enumerate(row):
                        line[header_idx[i]] = cell.value
                    scan_data.append(line)
        # print ("load scan: ", len(scan_data))
    return scan_data
    

def load_scan_dir_csv(data_folder, output):   # scan_data is in standard qradar format, 24 column
    output.delete(0.0, END)        # clear window
    scan_data = []
    for folder, subs, files in os.walk(data_folder):
        for f in files:
            filename, file_extension = os.path.splitext(f)
            if file_extension != ".csv":
                continue
            
            # print (folder.split('/')[-1] + "-->" +  f)
            # output.insert(END, filename + '\n')
            if folder.split('\\')[-1] == 'old':
                output.insert(END, "skipped folder: " +  folder + '\n')
                continue
            output.insert(END, folder.split('/')[-1] + "-->" +  f + '\n')
            with open(os.path.join(os.path.join(folder, f))) as csv_file:
                csv_reader = csv.reader(csv_file, delimiter=',')
                for i, row in enumerate(csv_reader):
                    # if folder.split('/')[-1] == 'DR-VLAN-77-AIX-Servers-Power-7-FULL':
                        # print (i, folder.split('/')[-1], '-->', row[0], len(row))
                    if len(row) != 28:
                        output.insert(END, f'filename skipped, # col are not 28, it is: {len(row)}" \n')
                        break
                    if row[0] != 'name':        # skip header
                        # output.insert(END, filename +  str(i) + '\n')
                        scan_data.append(row)
                        # pass
    # print (len(scan_data))
    return scan_data
    

def add_new_assets():
    cmd = """
        SELECT DISTINCT vul.ipaddress
        FROM vulnerability vul LEFT JOIN assets ast USING (ipaddress)
        GROUP by vul.name
		HAVING ast.ipaddress is NULL"""
    new_profile_list = query_to_list(cmd, False)
    # print (len(new_profile_count))
    if len(new_profile_list) == 0:
        return False

    cmd = """
    INSERT INTO assets 
    SELECT * 
    FROM
        (
            SELECT DISTINCT Null, vul.ipaddress, vul.name, vul.assetName, "?","?","?","?",NULL
            FROM vulnerability vul LEFT JOIN assets ast USING (ipaddress)
            GROUP by vul.name
            HAVING ast.ipaddress is NULL
        )a"""
    exec_db_cmd(cmd)
    return True


    
    return True

def check_new_assets(scan_data):            # not used anymore
    conn, cursor = open_db()
    for row in scan_data:
        ip = row[IP_ADDRESS_COL]
        cmd = f"SELECT profile_name FROM assets WHERE ipaddress = '{ip}'"
        header, lst = query_to_list(cmd)
        if len(lst)== 0:    # IP not found, add it as is until manual fix, add "(NEW)"
            print(f"Newly added server: {ip}, tmp profile:{row[0]}")
            new_servers = True
            profile_name =  row[0]
            profile_list.append(profile_name)
            rec = [ip, profile_name, row[ASSET_NAME_COL], "?", "?", ""]
            try:
                insert_row_list(conn, cursor, "assets", rec)
                conn.commit()
            except:
                print (f"check_new_assets: record already exist")
                continue    # record already exist frrom previous scan row
        else:   # found, relace temp scan profile name with asset profile_name
            profile_list.append(lst[0][0])
    
    close_db(cursor)
    if new_servers:
        messagebox.showinfo("Warning", "Newly added assets to assets name '(NEW)', please arrange to adjust")
    return profile_list
    

def add_new_profile_stats():

    # check newly profiles not in assets
    cmd = """
    INSERT INTO stats
    select a.milestone, a.profile_group, a.profile_name, followup_group, 0, 0,0,0,0,0, 0, 0, 0,0,0,0,0,0
    FROM (
        SELECT ms.milestone, ast.profile_group, ast.profile_name, ast.followup_group
        FROM assets ast 
            LEFT JOIN stats st using (profile_name)
            LEFT JOIN milestone ms USING(followup_group)
        GROUP BY ast.profile_name
        HAVING st.profile_name is NULL
    )a """
    exec_db_cmd(cmd)


def update_stats(output):
   # print ("update_status")

    output.insert(END," delete stats and inset stats record from base_vul\n")
    
    insert_base_stats(output)     # delete stats and inset stats record from base_vul

    output.insert(END," add_new_profile_stats\n")

    add_new_profile_stats()

    output.insert(END," Update stats.... \n")
    cmd = f"""UPDATE stats
    SET current_numHosts = crnt.numHosts,
        current_total_all = crnt.total_all,
        current_total_HM = crnt.total_HM
    FROM
    (
    SELECT vul.name,
        COUNT(DISTINCT vul.ipaddress) as numHosts,
        COUNT(risk) as total_all, 
        COUNT(CASE WHEN risk in ('High' ,'Medium') Then 1 END) as total_HM 
        FROM vulnerability vul 
            LEFT JOIN assets ast using (ipaddress)
        WHERE ifnull(ast.exclude,0) != 1 
        GROUP by vul.name
    ) crnt
    WHERE stats.profile_name = crnt.name"""
    # print (cmd)
    exec_db_cmd(cmd)

    # Update Vulnerabilty type progress
    cmd = """UPDATE stats
    SET current_total_vt = crnt.total_vt
    FROM
    (
    SELECT vul.name,
        COUNT(DISTINCT vulnerability) as "total_vt"
        FROM vulnerability vul 
        LEFT JOIN assets ast using (ipaddress)
    WHERE risk in ('High', 'Medium') AND ifnull(ast.exclude,0) != 1 
    GROUP by vul.name
    ) as crnt
    WHERE stats.profile_name = crnt.name"""
    # print (cmd)
    exec_db_cmd(cmd)

    # Update Project scope progress HM
    cmd = f"""UPDATE stats
    SET 
        proj_scope_current_HM = crnt.current_total_HM,
        proj_scope_current_vt = 0
    FROM
    (
        SELECT name, 
            COUNT(CASE WHEN risk in ('High' ,'Medium') THEN 1 END ) as current_total_HM
        FROM vulnerability vul 
            LEFT JOIN assets ast using (ipaddress)
        WHERE vul.ipaddress in (SELECT distinct ipaddress FROM base_vul)
            AND ifnull(ast.exclude,0) != 1 
        GROUP by name
    ) crnt
    WHERE stats.profile_name = crnt.name"""
    exec_db_cmd(cmd)

    cmd = """UPDATE stats_vt
        SET 
            current_numHosts = base.numHosts
        FROM
        (
            SELECT DISTINCT followup_group,
            count(DISTINCT ipaddress) as numHosts
            FROM vulnerability vul 
                LEFT JOIN assets ast USING (ipaddress)
            WHERE ifnull(ast.exclude,0) != 1 
            GROUP by followup_group
        ) as base
        WHERE stats_vt.followup_group = base.followup_group"""
    # print (cmd)
    exec_db_cmd(cmd)

    cmd = """UPDATE stats_vt
        SET 
            current_total_vt = base.total_vt
        FROM
        (
            SELECT DISTINCT followup_group,
            COUNT(DISTINCT vulnerability) as total_vt
            FROM vulnerability vul 
                LEFT JOIN assets ast USING (ipaddress)
            WHERE risk in ('High', 'Medium') AND ifnull(ast.exclude,0) != 1 
            GROUP by followup_group
        ) as base
        WHERE stats_vt.followup_group = base.followup_group"""
    # print (cmd)
    exec_db_cmd(cmd)

def replace_temp_profile_name(scan_data):
 # replace temp profile_name with the one from assets
    for row in scan_data:
        cmd = f"SELECT profile_name FROM assets WHERE ipaddress = '{row[IP_ADDRESS_COL]}'"
        # print (cmd)
        profile_name = query_to_list(cmd, return_header=False)
        if len(profile_name) == 1: # if not found, keep old
            row[0] = profile_name[0][0]  

    return scan_data


def insert_base_stats(output):
    
    if exec_db_cmd("DELETE FROM stats") == -1:  # Database is locked
        return -1
    # print ("insert_stats")
    cmd = f"""INSERT INTO stats 
    select a.milestone, a.profile_group, a.name, followup_group, numHosts,High,Medium, Low, Warning, 
    total_all, total_HM, 0, 0,0,0,0,0,0
    FROM
    (
        SELECT ms.milestone, profile_group, vul.name, ms.followup_group,
        COUNT(distinct assets.ipaddress) as "numHosts",
        COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
        COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
        COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
        COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
        COUNT(risk) as total_all, 
        COUNT(CASE WHEN risk in ('High' ,'Medium') Then 1 END) as total_HM 
        FROM base_vul vul 
            LEFT JOIN assets USING (ipaddress)
            LEFT JOIN milestone ms USING(followup_group)
        --WHERE ifnull(assets.exclude,0) != 1
        GROUP by name
        ORDER BY 2
    ) a"""
    exec_db_cmd(cmd)

    cmd = """UPDATE stats
    SET total_vt = base.total_vt
    FROM
    (
        SELECT vul.name,
        COUNT(DISTINCT vulnerability) as "total_vt"
        FROM base_vul vul 
            LEFT JOIN assets ast USING (ipaddress)
        WHERE risk in ('High', 'Medium') 
        -- AND ifnull(ast.exclude,0) != 1 
        GROUP by vul.name
    ) as base
    WHERE stats.profile_name = base.name"""
    # print (cmd)
    exec_db_cmd(cmd)

    # update vt_stats as it's grouped by followup group not profile_name
    cmd = """UPDATE stats_vt
        SET base_numHosts = base.numHosts
    FROM
    (
        SELECT DISTINCT followup_group,
        count(DISTINCT ipaddress) as numHosts
        FROM base_vul vul 
            LEFT JOIN assets ast USING (ipaddress)
        GROUP by followup_group
    ) as base
    WHERE stats_vt.followup_group = base.followup_group"""
    # print (cmd)
    exec_db_cmd(cmd)

    cmd = """UPDATE stats_vt
        SET base_total_vt = base.total_vt
    FROM
    (
        SELECT DISTINCT followup_group,
        COUNT(DISTINCT vulnerability) as total_vt
        FROM base_vul vul 
            LEFT JOIN assets ast USING (ipaddress)
        WHERE risk in ('High', 'Medium') 
        GROUP by followup_group
    ) as base
    WHERE stats_vt.followup_group = base.followup_group"""
    # print (cmd)
    exec_db_cmd(cmd)
