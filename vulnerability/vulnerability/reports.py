import os
from DB import  query_to_excel, query_to_list
from tkinter import messagebox

OUT_FOLDER = r"C:\Users\yahia\Documents\out"

stats_by_group_cmd = f""" SELECT  vlan_group, location, 
    COUNT(distinct assets.ipaddress) as "numHosts",
	COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	COUNT(risk) as "Total"
    FROM vulnerability vul LEFT JOIN assets on assets.ipaddress = vul.ipaddress
    GROUP by location, vlan_group
UNION
SELECT  "Total", "", 
    count(distinct assets.ipaddress) as "numHosts",
	COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	COUNT(risk) as "Total"
    FROM vulnerability vul LEFT JOIN assets on assets.ipaddress = vul.ipaddress
ORDER BY 1,2 DESC"""   
    
# stats_by_group_totals_cmd = f""" SELECT  'Total', '', 
    # count(distinct assets.ipaddress) as "numHosts",
	# COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	# COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	# COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	# COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	# COUNT(risk) as "Total"
    # FROM vulnerability vul LEFT JOIN assets on assets.ipaddress = vul.ipaddress"""   
    
stats_by_ip_cmd = f""" select  vlan_group, location, assets.ipaddress, assets.assetName,
	COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	COUNT(risk) as "Total"
    FROM vulnerability vul LEFT JOIN assets on assets.ipaddress = vul.ipaddress
    GROUP by location, vlan_group, assets.ipaddress
    ORDER BY 1,2 DESC"""   
    
vulners_list_all_cmd = """ select Location, profile_name, vlan_group as "Group", assets.ipaddress, assets.assetName,vulnerability, risk 
    FROM vulnerability vul LEFT JOIN assets on assets.ipaddress  = vul.ipaddress
    ORDER BY 1,2,3,4"""
    
    
def SAN_stats(file_name):
    cmd = f""" select name,ipaddress, assetName, 
	COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	COUNT(risk) as "Total"
    FROM vulnerability
    WHERE name LIKE '%SAN%'
    GROUP by name"""
    query_to_excel(cmd, file_name)
    
 
def VLAN_stats(file_name):
    cmd = f"""select name,count(distinct ipaddress) as "# of hosts",
	COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	COUNT(risk) as "Total"
    FROM vulnerability
    GROUP by name"""
    query_to_excel(cmd, file_name)
    
    
def Windows_and_Krom_stats(file_name):
    cmd = f"""select name
    FROM vulnerability
    WHERE name LIKE '%Windows%' or name like "%krom% or name like "internet"
    GROUP by name"""
    query_to_excel(cmd, file_name)
    
load_stats_cmd= """INSERT into TABLE "stats" (
    select date('now') as "Date", vlan_group as "Group", location, COUNT(distinct assets.ipaddress) as "numHosts",
	COUNT(CASE WHEN risk = 'High' Then 1 END) as 'High', 
	COUNT(CASE WHEN risk = 'Medium' Then 1 END) as 'Medium',
	COUNT(CASE WHEN risk = 'Low' Then 1 END) as 'Low',
	COUNT(CASE WHEN risk = 'Warning' Then 1 END) as 'Warning',
	COUNT(risk) as "Total"
    FROM vulnerability vul LEFT JOIN assets on assets.ipaddress = vul.ipaddress
    GROUP by location, vlan_group
    ORDER BY 1,2 DESC"""
    
def show_scan_progress(export=None):

    if export:
        if not os.path.exists(OUT_FOLDER):
            messagebox.showinfo("Error", f"Folder does not exist: {OUT_FOLDER}")
            return -1
    base_date = "2020-09-22"
    header, lst = query_to_list ("select date from stats order by 1 DESC limit 1")
    last_date = lst[0][0]
    
    cmd = f"""
    SELECT  b.milestone, b.profile_group, a.numHosts "Base mumHosts", b.numHosts "last scan # hosts",
          a.total "Base # Vulner.",
          b.total "Last Scan #Vulner.", (a.total - b.total) as "# Fixed",
          ROUND(((a.total - b.total) *1.0 /a.total)* 100, 1) as "Fixed %"
          FROM stats b INNER join stats a on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
UNION
SELECT  "Total ", "", sum(a.numHosts), sum(b.numHosts), sum(a.total),
          sum(b.total),sum (a.total - b.total),
          ROUND(((sum(a.total) - sum(b.total)) *1.0 /sum(a.total))* 100, 1)
          FROM stats a INNER join stats b on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
  ORDER BY 1"""
    
  
    # print (cmd)
    if export:
        query_to_excel(cmd, os.path.join(OUT_FOLDER, "scan_progress.xlsx"))  
    else:
        return query_to_list(cmd)    # return header, rows
    
    # print summary by milestone ###
    cmd = f"""
SELECT milestone, sum (BH) "Base # Hosts", sum(LH) "Last Scan # Hosts", sum (BT) "Base # Vulner", sum(LT) "Last Scan # Vulner", (sum (BT) - sum(LT)) as "# Fixed", 
         ROUND((sum (BT) - sum(LT))*1.0 /sum(BT)* 100.0, 1) as "Fixed %"
FROM (
SELECT  b.milestone, a.numHosts BH, b.numHosts LH,
          a.total BT,
          b.total LT, (a.total - b.total) as F
          FROM stats b INNER join stats a on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
)
GROUP BY milestone
UNION
SELECT "Total", sum (BH) "Base # Hosts", sum(LH) "Last Scan # Hosts", sum (BT) "Base # Vulner", sum(LT) "Last Scan # Vulner", (sum (BT) - sum(LT)) as "# Fixed", 
         ROUND((sum (BT) - sum(LT))*1.0 /sum(BT)* 100.0, 1) as "Fixed %"
FROM (
SELECT  b.milestone, a.numHosts BH, b.numHosts LH,
          a.total BT,
          b.total LT, (a.total - b.total) as F
          FROM stats b INNER join stats a on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
  )
"""
    if export:
        query_to_excel(cmd, os.path.join(OUT_FOLDER, "scan_progress.xlsx"))  
    else:
        return query_to_list(cmd)    # return header, rows
        

def progress_by_milestone(export=None):

    if export:
        if not os.path.exists(OUT_FOLDER):
            messagebox.showinfo("Error", f"Folder does not exist: {OUT_FOLDER}")
            return -1
    base_date = "2020-09-22"
    header, lst = query_to_list ("select date from stats order by 1 DESC limit 1")
    last_date = lst[0][0]
    
    cmd = f"""
SELECT  b.milestone, b.profile_group, a.numHosts "Base mumHosts", b.numHosts "last scan # hosts",
          a.total "Base # Vulner.",
          b.total "Last Scan #Vulner.", (a.total - b.total) as "# Fixed",
          ROUND(((a.total - b.total) *1.0 /a.total)* 100, 1) as "Fixed %"
          FROM stats b INNER join stats a on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
UNION
SELECT  "Total ", "", sum(a.numHosts), sum(b.numHosts), sum(a.total),
          sum(b.total),sum (a.total - b.total),
          ROUND(((sum(a.total) - sum(b.total)) *1.0 /sum(a.total))* 100, 1)
          FROM stats a INNER join stats b on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
"""
    # print (cmd)
    if export:
        query_to_excel(cmd, os.path.join(OUT_FOLDER, "scan_progress.xlsx"))  
    else:
        return query_to_list(cmd)    # return header, rows
        
        
def summary_progress_by_milestone(export=None):

    if export:
        if not os.path.exists(OUT_FOLDER):
            messagebox.showinfo("Error", f"Folder does not exist: {OUT_FOLDER}")
            return -1
    base_date = "2020-09-22"
    header, lst = query_to_list ("select date from stats order by 1 DESC limit 1")
    last_date = lst[0][0]
    
    cmd = f"""
    SELECT milestone, sum (BH) "Base # Hosts", sum(LH) "Last Scan # Hosts", sum (BT) "Base # Vulner", sum(LT) "Last Scan # Vulner", (sum (BT) - sum(LT)) as "# Fixed", 
         ROUND((sum (BT) - sum(LT))*1.0 /sum(BT)* 100.0, 1) as "Fixed %"
FROM (
SELECT  b.milestone, a.numHosts BH, b.numHosts LH,
          a.total BT,
          b.total LT, (a.total - b.total) as F
          FROM stats b INNER join stats a on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
)
GROUP BY milestone
UNION
SELECT "Total", sum (BH) "Base # Hosts", sum(LH) "Last Scan # Hosts", sum (BT) "Base # Vulner", sum(LT) "Last Scan # Vulner", (sum (BT) - sum(LT)) as "# Fixed", 
         ROUND((sum (BT) - sum(LT))*1.0 /sum(BT)* 100.0, 1) as "Fixed %"
FROM (
SELECT  b.milestone, a.numHosts BH, b.numHosts LH,
          a.total BT,
          b.total LT, (a.total - b.total) as F
          FROM stats b INNER join stats a on a.profile_group = b.profile_group AND a.milestone = b.milestone
          AND (a.date = "{base_date}" AND b.date = "{last_date}")
  )"""
  
    if export:
        query_to_excel(cmd, os.path.join(OUT_FOLDER, "Summary_progress by Milestone.xlsx"))  
    else:
        return query_to_list(cmd)    # return header, rows