# from tkinter import Tk, Label, Button, Entry, IntVar, END, W, E, NE, StringVar, DoubleVar, WORD, Menu
from tkinter import filedialog, ttk
import os
from tkinter.scrolledtext import ScrolledText
import tkinter as tk
# from tkinter import messagebox
# from tkinter.ttk import *
from reports import vulners_list_all_cmd, stats_by_group_cmd, stats_by_ip_cmd, show_scan_progress, progress_by_milestone, \
        summary_progress_by_milestone
from load_db import load_db, excel_to_csv_file
from DB import query_to_excel
from print_text_table import print_query
from increment_scan import load_increment_scan_result

    
# DATA_FOLDER=r"C:\Users\yahia\Documents\Vulner project\Qradar\09-2020 - Copy"
OUT_FOLDER = r"C:\Users\yahia\Documents\out"


selected_group =-1
selected_loc = -1

def run_menu():
    root = tk.Tk()
    #root.attributes('-fullscreen', True)
    root.state('zoomed')
    
    selected_loc=tk.StringVar()
    selected_group = tk.StringVar()
    # output = draw_window(root, selected_group, selected_loc)
    
    menu_bar = tk.Menu(root)
    file_menu = tk.Menu(menu_bar, tearoff=0)
    # file_menu.add_command(label="Load Qradar files", command=lambda: load_db(DATA_FOLDER, output))
    file_menu.add_command(label="Load Qradar files", command= lambda:no_params_window(root, fn_num=10))
    file_menu.add_separator()
    file_menu.add_command(label="Load incremenatal scan file(s)", command=lambda:no_params_window(root, fn_num=11))
    file_menu.add_command(label="Excel to csv Qradar", command= lambda:mnu_excel_to_csv(output))
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=root.quit)
    menu_bar.add_cascade(label="Load", menu=file_menu)
    
    report_menu = tk.Menu(menu_bar, tearoff = 0)
    report_menu.add_command(label="Stats by ip", command= lambda: no_params_window(root, fn_num=1))
    report_menu.add_command(label="Vulnerability All", command= lambda: no_params_window(root, fn_num=2))
    report_menu.add_command(label="Stats by Group", command= lambda: no_params_window(root, fn_num=3))     
    report_menu.add_command(label="Progress by Group", command= lambda: no_params_window(root, fn_num=4))
    report_menu.add_command(label="Progress by Milestone", command= lambda: no_params_window(root, fn_num=5))
    report_menu.add_command(label="Summary Progress by Milestone", command= lambda: no_params_window(root, fn_num=6))
    menu_bar.add_cascade(label="Reports", menu=report_menu)

    
    export_menu = tk.Menu(menu_bar, tearoff = 0)
    export_menu.add_command(label="Stats by ip", 
        command= lambda: query_to_excel(stats_by_ip_cmd, os.path.join(OUT_FOLDER, "stats_by_ip.xlsx")))
    export_menu.add_command(label="Vulnerability All", 
        command= lambda: query_to_excel(vulners_list_all_cmd, os.path.join(OUT_FOLDER, "vulners_list_all.xlsx")))
    export_menu.add_command(label="Stats by VLAN Group_all", 
        command= lambda: query_to_excel(stats_by_group_cmd, os.path.join(OUT_FOLDER, "stats_by_group.xlsx")))
    export_menu.add_command(label="Scan Progress", 
        command= lambda: show_scan_progress(export=True))
    export_menu.add_command(label="scan stats by a group", 
                                    command= lambda: scan_stats_by_goup_select(root))
    menu_bar.add_cascade(label="Export", menu=export_menu)

    root.config(menu=menu_bar)    
        
    root.mainloop()
    
    
def load_increment_scan(output):
    try:
        file_path = tk.filedialog.askopenfilename(title="Select file",multiple=True,
                                           filetypes=(("Excel files", "*,xlsx"), ("Excel files", "*.xlsx")))
    except:
        tk.messagebox.showinfo("No File", "No file selected ...")
        return None
    load_increment_scan_result(file_path, output)
    tk.messagebox.showinfo("Info!", "file loaded successfully ....")
    
    
def mnu_load_db(output):
    r = tk.messagebox.askyesno("Confirm", "Reload all vulneabilities files?")
    if r:
        data_folder = tk.filedialog.askdirectory(initialdir=".", title="select data folder", mustexist =True)
        load_db(data_folder, output)
        
def mnu_excel_to_csv():
    file_path = tk.filedialog.askopenfilename(title="Select File",
                                           filetypes=(("Excel files", "*,xlsx"), ("Excel files", "*.xlsx")))
    if file_path:
        excel_to_csv_file(file_path)
    tk.messagebox.showinfo("OK", "file converted")
    
def draw_window(root, selected_group, selected_loc):

    ttk.Label(root, text = "Select group: ", 
            font = ("Times New Roman", 10)).grid(row = 3, column = 0, columnspan =3) #, padx = 10, pady = 25) 
    
    # selected_group = tk.StringVar() 
    group = ttk.Combobox(root, width = 27, state="readonly", textvariable = selected_group) 
    group['values'] = (' AIX-Servers',  
                          ' Legacy Branch Linux', 
                          ' Microsoft-Servers', 
                          ' Network & Security Devices', 
                          ' SAN-Switches & Routers', 
                          ' ?' 
                            ) 
  
    group.grid(row = 3, column = 1,  columnspan = 3) 
    group.current(newindex = 1) 
    # execute_btn = tk.Button(root, text="run", command = lambda:set_params(group.get(), location.get())).grid(row=3, column=2,  columnspan =3)
    execute_btn = tk.Button(root, text="run", command = 
                lambda:set_params(group.current(), location.current())).grid(row=3, column=2,  columnspan =3)
    
    ttk.Label(root, text = "Select Location: ", 
            font = ("Times New Roman", 10)).grid(row = 4, column = 0,  columnspan =3)
    # selected_loc = tk.StringVar() 
    location = ttk.Combobox(root, width = 27, state="readonly", textvariable = selected_loc) 
    location['values'] = (' Main',  
                          ' DR', 
                          ' Krome', 
                          ' ?',
                          ' All')
    location.grid( row = 4 , column = 1, columnspan = 3) 
    location.current(newindex =4) 
    
    output = ScrolledText(root, width=160, height = 30, wrap = tk.WORD, background = 'white')
    output.grid(row=5, column = 0, columnspan = 3, sticky = 'W')    

    return output
    
def set_params(group, loc):
    selected_group = group
    selected_loc= loc
    print ("params:", group, loc)
    print ("params:", selected_group, selected_loc)
  
def no_params_window(root, fn_num):
    frame = tk.Frame(root)
    frame.pack()
    clear_btn = tk.Button(frame, text="Clear", command = frame.destroy).grid(row=1, column=2, columnspan = 2)
    output = ScrolledText(frame, width=150, height = 40, wrap = tk.WORD, background = 'white')
    output.grid(row=1, column = 0, columnspan = 2, sticky = 'W')
    
    if fn_num == 1:
        print_query(stats_by_ip_cmd, output, "Stats by IP" )
    elif fn_num == 2:
        print_query(vulners_list_all_cmd, output, "Vulnerability All" )
    elif fn_num == 3:
        print_query(stats_by_group_cmd, output, "Stats by VLAN Group" )
    elif fn_num == 4:
        print_query(show_scan_progress, output, "Show Scan Progress" )
    elif fn_num == 5:
        print_query(progress_by_milestone, output, "Progress By Milestone" )
    elif fn_num == 6:
        print_query(summary_progress_by_milestone, output, "Progress By Milestone" )
    elif fn_num == 10:
        r = tk.messagebox.askyesno("Confirm", "Reload all vulneabilities files?")
        if r:
            data_folder = tk.filedialog.askdirectory(initialdir=".", title="select data folder", mustexist =True)
            load_db(data_folder, output)
            tk.messagebox.showinfo("Done")
    elif fn_num == 11:
        load_increment_scan (output)
        
