import os
import datetime

from openpyxl import Workbook, load_workbook
from DB import query_to_list, exec_db_cmd, insert_row_vulner, open_db, close_db, insert_row_list
from load_db import insert_stats
from tkinter import END

FULL_HEADER = ["name","sequenceNumber","scanresultid","criticalDetails","severity","status","active","duration",
              "concern","startTime","vulnerabilities","numHosts","solution","ipaddress","assetName","vulnerabilityInstances","risk",
              "vulnid","openServices","description","scanProfileId","cancelled","runSchedule","vulnerability","cveid",
              "exposureId","score","domainName"]
IP_ADDRESS_COL = 13
ASSET_NAME_COL = 14


def load_header_idx(header):
    header_idx= [-1] * len(FULL_HEADER)

    for i, col in enumerate(header):
        if col.value:
            x = FULL_HEADER.index(col.value)
            if x != -1:
                header_idx[i] = x
    return header_idx
    
    
def load_increment_scan_result(file_path, output):
    
    scan_data = load_scan(file_path, output)
    ips=[r[IP_ADDRESS_COL] for r in scan_data]
    # ------- del_old_vulners ---------------
    ip_list = '"' + '","'.join(ips) + '"'
    cmd = f"DELETE FROM vulnerability WHERE ipaddress in ({ip_list})"
    status = exec_db_cmd(cmd)
    
    lst = check_new_assets(scan_data)  # if new assets in this scan, add to assets table
    # ---- Inset new scan records
    
    conn, cursor = open_db()
    for i,row in enumerate(scan_data):
        # profile_name  = lst[i]
        # print ("insert scan rows: ", row)

        # print (len (row[1:])
        # row = [lst[i], row[1:]] # replace temp profile_name with the once from assets
        
        # print (lst[i], row[0])
        row [0] = lst[i]
        # print(i, "-", row)
        insert_row_vulner(conn, cursor, row)
    conn.commit()
    close_db(cursor)
    
    insert_stats(datetime.date.today())
    
    
def load_scan(file_paths, output):   # scan_data is in standard qradar format, 24 column
    output.delete(0.0, END)        # clear window
    scan_data = []
    for file_path in file_paths:
        output.insert(END, f'Loadind the files: {file_path}\n')
        xl_wb = load_workbook(file_path)
        for sheet in xl_wb:
            for l, row in enumerate(sheet.rows):
                if l == 0:  # skip header
                    header_idx = load_header_idx(row)
                else:
                    line = [''] * len(FULL_HEADER)
                    for i, cell in enumerate(row):
                        line[header_idx[i]] = cell.value
                    scan_data.append(line)
        # print ("load scan: ", len(scan_data))
    return scan_data
    
    
def check_new_assets(scan_data):

    print ("len(scan_data)", len(scan_data))
    profile_names = []
    conn, cursor = open_db()
    for row in scan_data:
        ip = row[IP_ADDRESS_COL]
        cmd = f"SELECT profile_name FROM assets WHERE ipaddress = '{ip}'"
        header, lst = query_to_list(cmd)
        if len(lst)== 0:    # not found
            print (f"Newly added server: {ip}, tmp profile:{row[0]}")
            no_of_new_assets += 1
            rec = [ip, row[0], row[ASSET_NAME_COL], "?", "?", ""]
            profile_names.append(row[0])
            try:
                insert_row_list(conn, cursor, "assets", rec)
                conn.commit()
            except:
                print (f"check_new_assets: record already exist")
                continue    # record already exist frrom previous scan row
        elif row[0] != lst[0][0]:   # found but with diff name
            print (f"diff profile name: {ip}, tmp profile:{row[0]}, profile name:{lst[0][0]}")
            profile_names.append(lst[0][0])
        else:  
            print (f"something else: {ip}, tmp profile:{row[0]}, profile name:{lst[0][0]}")
            profile_names.append(lst[0][0])
    
    close_db(cursor)
    return profile_names
    



