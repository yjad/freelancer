# from tkinter import Tk, Label, Button, Entry, IntVar, END, W, E, NE, StringVar, DoubleVar, WORD, Menu
from tkinter import filedialog, ttk
import os
from tkinter.scrolledtext import ScrolledText
import tkinter as tk
# from tkinter import messagebox
# from tkinter.ttk import *
from reports import vulners_list_all_cmd, stats_by_group_cmd, stats_by_ip_cmd, progress_by_group, progress_by_milestone, \
        progress_by_milestone, progress_by_profile, progress_VT_by_profile, progress_VT_by_group, progress_VT_by_milestone, \
        progress_by_profile_proj_scope, progress_by_group_proj_scope, progress_by_milestone_proj_scope, progress_by_followup_group, \
        vulner_CVEID_list, list_excluded_servers, progress_VT_by_followup_group, cveid_fix_category_stats
from load_db import load_db, excel_to_csv_file
from DB import query_to_excel,OUT_FOLDER
from print_text_table import print_query
from increment_scan import load_increment_scan_result, load_scan_dir_csv, update_stats

    
# selected_group =-1
# selected_loc = -1

def run_menu():
    root = tk.Tk()
    #root.attributes('-fullscreen', True)
    root.state('zoomed')
    # root.attributes('-zoomed', True)
    
    output = ScrolledText(root, width=150, height = 40, wrap = tk.WORD, background = 'white')
    output.grid(row=1, column = 0, columnspan = 2, sticky = 'W')
    
    menu_bar = tk.Menu(root)
    file_menu = tk.Menu(menu_bar, tearoff=0)
    # file_menu.add_command(label="Load Qradar files", command=lambda: load_db(DATA_FOLDER, output))
    file_menu.add_command(label="1. Load Base Qradar scan files", command= lambda:no_params_window(output, fn_num=100))
    file_menu.add_separator()
    file_menu.add_command(label="2. Load incremenatal excel scan file(s)", command=lambda:no_params_window(output, fn_num=101))
    file_menu.add_command(label="3. Load after-remeditaion csv folder", command=lambda:no_params_window(output, fn_num=102))
    file_menu.add_command(label="4. Excel to csv Qradar", command= lambda:mnu_excel_to_csv())
    file_menu.add_separator()
    file_menu.add_command(label="5. Update Stats", command= lambda:update_stats(output))
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=root.quit)
    menu_bar.add_cascade(label="Load", menu=file_menu)
    
    report_menu = tk.Menu(menu_bar, tearoff = 0)
    report_menu.add_command(label="1- Stats by ip", command= lambda: no_params_window(output, fn_num=1, export=False))
    report_menu.add_command(label="2- Vulnerability All", command= lambda: no_params_window(output, fn_num=2, export=False))
    report_menu.add_command(label="3- Stats by Group", command= lambda: no_params_window(output, fn_num=3, export=False))     
    report_menu.add_command(label="4- Progress by Profile", command= lambda: no_params_window(output, fn_num=4, export=False))
    report_menu.add_command(label="5- Progress by Group", command= lambda: no_params_window(output, fn_num=5, export=False))
    report_menu.add_command(label="6- Progress by Milestone", command= lambda: no_params_window(output, fn_num=6, export=False))
    report_menu.add_separator()
    report_menu.add_command(label="7- Progress Vul Type by Profile", command= lambda: no_params_window(output, fn_num=7, export=False))
    report_menu.add_command(label="8- Progress Vul Type by Group", command= lambda: no_params_window(output, fn_num=8, export=False))
    report_menu.add_command(label="9- Progress Vul Type by Milestone", command= lambda: no_params_window(output, fn_num=9, export=False))
    report_menu.add_separator()
    report_menu.add_command(label="10- Progress project scope Vul by profile", command= lambda: no_params_window(output, fn_num=10, export=False))
    report_menu.add_command(label="11- Progress project scope Vul by Group", command= lambda: no_params_window(output, fn_num=11, export=False))
    report_menu.add_command(label="12- Progress project scope Vul by Milestone", command= lambda: no_params_window(output, fn_num=12, export=False))
    report_menu.add_separator()
    report_menu.add_command(label="13- Progress followup group", command= lambda: no_params_window(output, fn_num=13, export=False))
    report_menu.add_command(label="14- Progress Vul Type followup group", command= lambda: no_params_window(output, fn_num=16, export=False))
    report_menu.add_command(label="15- CVEID list with fix Categ", command= lambda: no_params_window(output, fn_num=14, export=False))
    report_menu.add_command(label="16- List excluded servers", command= lambda: no_params_window(output, fn_num=15, export=False))
    report_menu.add_command(label="17- CVEID Fix Category Stats", command= lambda: no_params_window(output, fn_num=17, export=False))
    menu_bar.add_cascade(label="Reports", menu=report_menu)

    
    export_menu = tk.Menu(menu_bar, tearoff = 0)
    export_menu.add_command(label="1- Stats by ip", command= lambda: no_params_window(output, fn_num=1, export=True))
    export_menu.add_command(label="2- Vulnerability All", command= lambda: no_params_window(output, fn_num=2, export=True))
    export_menu.add_command(label="3- Stats by Group", command= lambda: no_params_window(output, fn_num=3, export=True))
    export_menu.add_command(label="4- Progress by Profile", command= lambda: no_params_window(output, fn_num=4, export=True))
    export_menu.add_command(label="5- Progress by Group", command= lambda: no_params_window(output, fn_num=5, export=True))
    export_menu.add_command(label="6- Progress by Milestone", command= lambda: no_params_window(output, fn_num=6, export=True))
    export_menu.add_separator() 
    export_menu.add_command(label="7- Export Pogress Reports", command= lambda: no_params_window(output, fn_num=100, export=True))    
    menu_bar.add_cascade(label="Export", menu=export_menu)

    root.config(menu=menu_bar)    
        
    root.mainloop()
    
     
def mnu_load_db(output):
    r = tk.messagebox.askyesno("Confirm", "Reload all vulneabilities files?")
    if r:
        data_folder = tk.filedialog.askdirectory(initialdir=".", title="select data folder", mustexist =True)
        load_db(data_folder, output)
        
def mnu_excel_to_csv():
    file_path = tk.filedialog.askopenfilename(title="Select File",
                                           filetypes=(("Excel files", "*,xlsx"), ("Excel files", "*.xlsx")))
    if file_path:
        excel_to_csv_file(file_path)
    tk.messagebox.showinfo("OK", "file converted")
    
def draw_window(root, selected_group, selected_loc):

    ttk.Label(root, text = "Select group: ", 
            font = ("Times New Roman", 10)).grid(row = 3, column = 0, columnspan =3) #, padx = 10, pady = 25) 
    
    # selected_group = tk.StringVar() 
    group = ttk.Combobox(root, width = 27, state="readonly", textvariable = selected_group) 
    group['values'] = (' AIX-Servers',  
                          ' Legacy Branch Linux', 
                          ' Microsoft-Servers', 
                          ' Network & Security Devices', 
                          ' SAN-Switches & Routers', 
                          ' ?' 
                            ) 
  
    group.grid(row = 3, column = 1,  columnspan = 3) 
    group.current(newindex = 1) 
    # execute_btn = tk.Button(root, text="run", command = lambda:set_params(group.get(), location.get())).grid(row=3, column=2,  columnspan =3)
    # execute_btn = tk.Button(root, text="run", command = 
    #             lambda:set_params(group.current(), location.current())).grid(row=3, column=2,  columnspan =3)
    
    ttk.Label(root, text = "Select Location: ", 
            font = ("Times New Roman", 10)).grid(row = 4, column = 0,  columnspan =3)
    # selected_loc = tk.StringVar() 
    location = ttk.Combobox(root, width = 27, state="readonly", textvariable = selected_loc) 
    location['values'] = (' Main',  
                          ' DR', 
                          ' Krome', 
                          ' ?',
                          ' All')
    location.grid( row = 4 , column = 1, columnspan = 3) 
    location.current(newindex =4) 
    
    output = ScrolledText(root, width=160, height = 30, wrap = tk.WORD, background = 'white')
    output.grid(row=5, column = 0, columnspan = 3, sticky = 'W')    

    return output
    
def set_params(group, loc):
    selected_group = group
    selected_loc= loc
    print ("params:", group, loc)
    print ("params:", selected_group, selected_loc)
  
def no_params_window(output, fn_num, export=False):
    
    output.delete(0.0, tk.END)        # clear window

    if fn_num == 1:
        print_query(stats_by_ip_cmd, output, "Stats by IP" , 30, export)
    elif fn_num == 2:
        print_query(vulners_list_all_cmd, output, "Vulnerability All" , 30, export)
    elif fn_num == 3:
        print_query(stats_by_group_cmd, output, "Stats by VLAN Group", 30, export )
    elif fn_num == 4:
        print_query(progress_by_profile, output, "Progress by Profile", 30, export )
    elif fn_num == 5:
        print_query(progress_by_group, output, "Progress By Group", 30, export )
    elif fn_num == 6:
        print_query(progress_by_milestone, output, "Progress By milestone", 30, export )
    elif fn_num == 7:
        print_query(progress_VT_by_profile, output, "Progress Vul Type By Profile", 30, export )
    elif fn_num == 8:
        print_query(progress_VT_by_group, output, "Progress Vul Type By Group", 30, export )
    elif fn_num == 9:
        print_query(progress_VT_by_milestone, output, "Progress Vul Type By Milestone", 30, export )
    elif fn_num == 10:
        print_query(progress_by_profile_proj_scope, output, "Progress project scope Vul by profile", 30, export )
    elif fn_num == 11:
        print_query(progress_by_group_proj_scope, output, "Progress project scope Vul by Group", 30, export )
    elif fn_num == 12:
        print_query(progress_by_milestone_proj_scope, output, "Progress project scope Vul by pofile", 30, export )
    elif fn_num == 13:
        print_query(progress_by_followup_group, output, "Progress by Followup Group", 30, export )
    elif fn_num == 14:
        print_query(vulner_CVEID_list, output, "CVEID list with fix Categ", 30, export )
    elif fn_num == 15:
        print_query(list_excluded_servers, output, "List Excluded Servers", 30, export )
    elif fn_num == 16:
        print_query(progress_VT_by_followup_group, output, "Prog-VT-followup group", 30, export )
    elif fn_num == 17:
        print_query(cveid_fix_category_stats, output, "CVEID fix categ stats", 30, export )
    elif fn_num == 100:  # export all reports
        print_query(progress_by_profile, output, "1-Progress by Profile", 30, export, False)
        print_query(progress_by_group, output, "2-Progress By Group", 30, export, False )
        print_query(progress_by_milestone, output, "3-Progress By milestone", 30, export, False )
        print_query(progress_by_followup_group, output, "4-Progress by Followup group", 30, export, False )
        print_query(progress_VT_by_profile, output, "5-CVEID Prog By Profile", 30, export, False )
        print_query(progress_VT_by_group, output, "6-CVEID Prog By Group", 30, export, False )
        print_query(progress_VT_by_milestone, output, "7-CVEID Prog By Milestone", 30, export, False )
        # print_query(progress_by_profile_proj_scope, output, "7-Project Scope by Profile", 30, export, False )
        # print_query(progress_by_group_proj_scope, output, "8-Project Scope by Group", 30, export, False )
        # print_query(progress_by_milestone_proj_scope, output, "9-Project Scope by milestone", 30, export, False )

        print_query(progress_VT_by_followup_group, output, "8-CVEID Prog followup", 30, export, False )
        print_query(vulner_CVEID_list, output, "9-CVEID list with fix Categ", 30, export, False )
        print_query(cveid_fix_category_stats, output, "10-CVEID fix categ stats", 30, export, False )
        print_query(list_excluded_servers, output, "11-List Excluded Servers", 30, export, False )
        tk.messagebox.showinfo("Done!",f"files exported! to: {OUT_FOLDER}")
    elif fn_num == 100:
        r = tk.messagebox.askyesno("Confirm", "Reload all vulneabilities files?")
        if r:
            data_folder = tk.filedialog.askdirectory(initialdir=".", title="select data folder", mustexist =True)
            load_db(data_folder, output)
            tk.messagebox.showinfo("Done")
    elif fn_num == 101:
        try:
            file_path = tk.filedialog.askopenfilename(title="Select file",multiple=True,
                                           filetypes=(("Excel files", "*,xlsx"), ("Excel files", "*.xlsx")))
        except:
            tk.messagebox.showinfo("No File", "No file selected ...")
            return None
        load_increment_scan_result(file_path, output)
        tk.messagebox.showinfo("Info!", "file loaded successfully ....")
    elif fn_num == 102:
        try:
            data_folder = tk.filedialog.askdirectory(initialdir=".", title="select data folder", mustexist =True)
        except:
            tk.messagebox.showinfo("No folder", "No foder selected ...")
            return None
        load_increment_scan_result(data_folder, output)
        tk.messagebox.showinfo("Info!", "file loaded successfully ....")
            
